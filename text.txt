Установка расширений (powershell)
for /f %i in (extensions.txt) do code --install-extension %i

settings.json
Настройки VSC

keybindings.json
Бинды

Страницы
1. Регистрация
Поля: 
ФИО (Проверка на заполнение, кирилицуа с пробелами), 
Телефон (Валидация, формат +7(XXX)-XXX-XX-XX), 
Почта (Валидация, формат электронной почты), 
Логин (Валидация, английский язык), 
Пароль (Валидация, 6 символов)

Все поля обязательны для заполнения.

Ошибки от бекенда в toastify (на русском)

После регистрации перекидывать на страницу карточек

2. Логин
Поля:  
Логин (Валидация английский язык), 
Пароль (Валидация, 6 символов)

Ошибки от бекенда в toastify (на русском)

После логина перекидывать на страницу карточек

3. Формирование карточки
Автор - Обязательно
Название книги  - Обязательно
Выбор типа (Поделиться / Получить)  - Обязательно

Доп. (необязательно)
Издательство
Год издания
Переплет
Состояние книги

Ошибки от бекенда в toastify (на русском)

Функционал:
Дата добавления
Возможность удаления пользователем или администратором, архивация

После создания карточки, карточка идет на модерацию, в случае с админом сразу публикуется, после перекидывать в профиль/мои карточки

Профиль
Данные человека
Список его карточек со статусами


4. Админ
Логин - admin 
Пароль - bookworm

После логина перекидывать в профиль администратора

Список пользователей, администрирование карточек + функционал обычного профиля.

Список пользователей
Общий список с возможностью бана

Администрирование карточек
Список карточек на администрации, принять или отклонить (модалка с указанием причины, текст)

Общий список карточек 
Возможность удаления администратором  (модалка с указанием причины, текст)

5. Общий список опубликованных карточек от пользователей (поделиться).

Отображение чужих карточек со стаусом поделиться

Карточка инфа:
Имя пользователя
Инфа по книге

5. Шапка со ссылками
Ссылки на страницы (для админа доп страницы)
Защищенные страницы (только для авторизованных пользователей)

6. Полный адаптив


Описание бущего бекенда
Стэк: NestJS, Prisma, PostgreSQL, JWT, Валидация Body
Типы запросов
Get,Put,Post

1. Создать сущности
Admin

Список пользователей
Бан пользователя
Список карточек для модерации
Администрирование карточек (принять,отклонить c причиной, удалить принятую с причиной)

Auth
Регистрация
Логин
Проверка авторизации (токена)


Books

Карточка
Добавление карточки (для админа без подтверждения)
Список опубликованных карточек (с типом поделиться)


Profile
Получение инфы о юзере
Получение списка карточек юзера
Архивация карточки юзером


2. Middleware
Проверка авторизации 
Проверка на админа





3. Таблицы

Users
id - id, автозаполнение
login - логин
password (hash) - пароль
FIO - фио
Phone - телефон
Email - емейл
Date register - дата регистрации, автозаполнение
Status - 0 актив, 1 бан
isAdmin -админ или нет


Cards
id - id, автозаполнение
userId - id юзера
status - 0 актив, 1 архив, 2 удалена
RemoveReason - причина удаления
Title - название
type - 0 поделиться, 1 получить
Author - автор
Publisher - издатель
Year - год издания
Binding - переплет
Condition - состояние
DateCreate - дата публикации карточки, автозаполнение




Фронтенд
Цвета текст:
text-indigo-700 hover|select
text-gray-600

План бекенд:

1. Реализация функциональности карточек книг
Сейчас у вас есть модель Card в схеме Prisma, но нужно реализовать все CRUD операции для неё
Когда пользователь создаёт карточку, нужно учитывать тип (поделиться/получить)
Карточки от обычных пользователей должны идти на модерацию, а от админа - сразу публиковаться
Нужно реализовать логику статусов карточек (активная, архивная, удалённая)
2. Функциональность профиля пользователя
Реализовать получение информации о пользователе
Получение списка карточек пользователя
Управление своими карточками (архивация)

3. Административные функции
Реализовать управление пользователями (бан/разбан)
Модерацию карточек (одобрение/отклонение с указанием причины)
Получение списков пользователей и карточек на модерацию
Возможность удаления карточек с указанием причины
4. Улучшение безопасности
Добавить ограничение числа попыток входа
Усилить валидацию входных данных
Улучшить обработку ошибок и логирование

6. Фронтенд-интеграция
После завершения API нужно будет интегрировать его с фронтендом
Организовать корректную передачу JWT токена и обработку ответов API
Реализовать красивое отображение ошибок с помощью библиотеки toastify

План фронтенд:

План разработки фронтенда для проекта BookWorm
Этап 1.

Настройка контекста для аутентификации (AuthContext)
Создание базовых UI компонентов

Button (варианты: primary, secondary, danger)
Input (text, password, email, number)
Select/Dropdown
Checkbox/Radio
Card и CardGrid
Модальные окна
Toast-уведомления (интеграция с react-toastify)
Loader/Skeleton для состояний загрузки

Этап 2: Реализация аутентификации и авторизации
Создание страниц аутентификации

Страница регистрации с валидацией полей
Страница входа с ограничением попыток
Хранение JWT в localStorage и управление сессией
Настройка защищенных маршрутов

Middleware для проверки авторизации
Разделение маршрутов для обычных пользователей и администраторов
Редирект на соответствующие страницы после авторизации

Этап 3: Разработка основных страниц
Страница списка карточек

Отображение всех опубликованных карточек с типом "поделиться"

Анимированное отображение карточек (с framer-motion)

Страница профиля пользователя

Отображение информации о пользователе
Табы для разных категорий карточек пользователя (активные, архивные, на модерации)
Возможность управления своими карточками
Страница создания/редактирования карточки
Форма с валидацией для создания карточки
Выбор типа карточки (поделиться/получить)
Возможность предпросмотра перед отправкой

Этап 4: Административные функции
Панель администратора

Управление пользователями (список, возможность бана/разбана)
Модерация карточек

Список карточек на модерацию
Модальные окна для принятия/отклонения с указанием причины
Удаление карточек с указанием причины

Этап 5: Интеграция с API и управление состоянием
Создание API-клиента

Настройка axios с interceptors для автоматического добавления токена и обработки ошибок
Типизированные функции для каждого эндпоинта
Реализация хуков для работы с API

Использование React Query для кеширования и управления состоянием запросов
Хуки для работы с разными сущностями (useAuth, useCards, useProfile, useAdmin)
Обработка ошибок

Глобальный перехватчик ошибок API
Отображение ошибок с помощью toastify на русском языке
Этап 6: Улучшение UI/UX
Анимации и переходы

Анимации с использованием Framer Motion при переходах между страницами
Анимации для списков и модальных окон
Микроанимации для улучшения UX (кнопки, формы)
Адаптивность

Проверка и улучшение адаптивности для разных устройств
Разработка мобильного меню для навигации
Оптимизация отображения карточек на разных экранах
Темизация

Создание темной/светлой темы (опционально)
Настройка кастомных цветов в Tailwind (indigo-700 для hover/select, gray-600 для обычного текста)

Технический стек
Основные библиотеки

React для построения UI
React Router для маршрутизации
TailwindCSS для стилизации
Framer Motion для анимаций
React Query для управления состоянием API-запросов
Axios для работы с API
React Hook Form для форм
Zod/Yup для валидации
React Toastify для уведомлений
Дополнительные инструменты

TypeScript для типизации
ESLint и Prettier для форматирования кода
Vite для сборки проекта